[core]
	editor = nvim

[user]
	useConfigOnly = true

[branch]
	sort = -committerdate

[tag]
	sort = version:refname

[push]
	default = upstream

[init]
	defaultBranch = main

[diff]
	algorithm = histogram
	colorMoved = plain
	colorMovedWS = allow-indentation-change
	mnemonicPrefix = true
	renames = true

[checkout]
	guess = false

[merge]
	conflictstyle = zdiff3

[grep]
	patternType = perl

[alias]
	root = rev-parse --show-toplevel
	rdelete = "!f() { \
		branch=$(git rev-parse --abbrev-ref HEAD); \
		git switch --detach ;\
		git branch -D $branch ;\
		git restore . ;\
		git clean -fdq ;\
		}; f;"
	dbranch = rdelete
	s = status
	a = add
	fadd = "! \
		to_name() {\
			while IFS= read -r line; do \
				echo \"${line#???}\" ; \
			done \
		};\
		filter_unstaged() {\
			while IFS= read -r line; do\
				if [[ \"${line:1:1}\" != \" \" ]]; then\
					echo \"$line\" ; \
				fi\
			done\
		};\
		f() { \
			files=$(git status --untracked-files --porcelain \
				| filter_unstaged \
				| fzf -m --layout=reverse --height=30% --min-height=5 \
				| to_name) ; \
			git add \"$@\" $files; \
		}; f"
	fa = fadd
	frestore = "! \
		to_name() {\
			while IFS= read -r line; do \
				echo \"${line#???}\" ; \
			done \
		};\
		f() { \
			files=$(git status --untracked-files --porcelain \
				| fzf -m --layout=reverse --height=30% --min-height=5 \
				| to_name) ; \
			git restore \"$@\" $files; \
		}; f"
	fr = frestore
	d = diff
	p = pull
	pp = pull --prune --no-stat
	f = fetch
	fp = fetch --prune
	w = worktree
	wtl = worktree list
	l = log --format=format:'%C(Yellow)%H%Cred%d%Creset%n%s'
	lg = l --graph
	c = commit
	cempty = commit --allow-empty

[include]
	path = local.gitconfig
